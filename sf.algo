#! /usr/bin/env fralgo
# vim: ft=fralgo

Importer "simpfunk"

Variables prg, d_prg, buf en Chaîne
Variable len en Entier

Procédure help()
  Ecrire "+. sf v0.2.1 .+"
  Ecrire ""
  Ecrire "Usage:"
  Ecrire "sf --run <program.sf> -- Execute a Simpfunk program."
  Ecrire "sf --gen '<string>' [-1] -- generate a Simpfunk program."
  Ecrire "sf --gen-c '<string>' [-1] -- generate a compressed Simpfunk program."
  Ecrire "* -1 adds a print instruction for each character."
  Ecrire "sf --compress <program.sf> -- Compress a Simpfunk program"
  Ecrire "sf --decompress <program.sfx> -- Decompress a Simpfunk program"
  Ecrire ""
FinProcédure

Fonction read_program(file en Chaîne) en Chaîne
  Variables program, buffer en Chaîne
  program <- ""

  Ouvrir file sur 1 en Lecture
  TantQue NON(FDF(1))
    LireFichier 1, buffer
    program <- program & buffer
  FinTantQue
  Fermer 1

  Retourne program
FinFonction

Début
  len <- Taille(_ARGS)
  Si len = 1 Alors
    help()
  SinonSi _ARGS[1] = "--gen" ET len > 2 Alors
    Si len = 4 Alors
      prg <- simpfunk:to_funk(_ARGS[2], _ARGS[3] = "-1", VRAI)
    Sinon
      prg <- simpfunk:to_funk(_ARGS[2], FAUX, VRAI)
    FinSi
    Ecrire prg
  SinonSi _ARGS[1] = "--gen-c" ET len > 2 Alors
    Si len = 4 Alors
      prg <- simpfunk:to_funk(_ARGS[2], _ARGS[3] = "-1", FAUX)
    Sinon
      prg <- simpfunk:to_funk(_ARGS[2], FAUX, FAUX)
    FinSi
    Ecrire prg
  SinonSi _ARGS[1] = "--run" ET len = 3 Alors
    prg <- read_program(_ARGS[2])
    simpfunk:execute(prg)
    EcrireErr ""
  SinonSi _ARGS[1] = "--compress" ET len = 3 Alors
    d_prg <- read_program(_ARGS[2])
    prg <- simpfunk:compress(d_prg)
    Ecrire prg
  SinonSi _ARGS[1] = "--decompress" ET len = 3 Alors
    prg <- read_program(_ARGS[2])
    d_prg <- simpfunk:decompress(prg, VRAI)
    Ecrire d_prg
  Sinon
    help()
  FinSi
Fin
