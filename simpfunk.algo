Librairie
# Simpfunk:
# + flip bit
# . add bit to buffer
# : print buffer and clear

Variable register en Entier
Variable buffer en Chaîne

Procédure reset()
  register <- 0
  buffer  <- ""
FinProcédure

Procédure error(idx en Entier, cmd en Caractère)
  EcrireErr "File:", _ARGS[2]
  EcrireErr "ERROR at position", bin_pad(Car(idx))
  EcrireErr "+. Invalid character >", cmd, "<"
  EcrireErr ".: Most likely not a Simpfunk program..."
  EcrireErr "\033[?25h" \
FinProcédure

Fonction bin_pad(char en Caractère) en Chaîne
  # H → 72 → 1001000 → 01001000
  Variable chars en Caractère*2
  Variable cc en Entier
  Variable res en Chaîne
  chars <- "01"
  cc <- CodeCar(char)
  res <- ""
  TantQue cc > 0
    res <- Extraire(chars, cc % 2 + 1, 1) & res
    cc <- cc / 2
  FinTantQue
  TantQue Longueur(res) < 8
    res <- "0" & res
  FinTantQue
  Retourne res
FinFonction

Procédure print_line(string en Chaîne)
  EcrireErr "\033[K" & string & "\r" \
FinProcédure

Fonction to_funk(string en Chaîne, one, raw en Booléen) en Chaîne
  # H → 72 → 01001000 → .+.+..+.+...
  Variables bits, program en Chaîne
  Variables bit, idx1, idx2, len en Entier
  Variables start, end, percent en Numérique

  bits <- ""
  program <- ""
  bit <- 0
  len <- Longueur(string)

  start <- TempsUnix()
  EcrireErr "\033[?25lGenerating..."

  Pour idx1 <- 1 à len
    bits <- bin_pad(Extraire(string, idx1, 1))
    Pour idx2 <- 1 à 8
      Si Extraire(bits, idx2, 1) = "0" Alors
        Si bit = 0 Alors
          program <- program & "."
        Sinon
          program <- program & "+."
        FinSi
        bit <- 0
      Sinon
        Si bit = 1 Alors
          program <- program & "."
        Sinon
          program <- program & "+."
        FinSi
        bit <- 1
      FinSi
      percent <- 100 * idx1 / Numérique(len)
      print_line(Chaîne(Entier(percent)) & " % " & bits & " > " & Extraire(program, 8 * (idx1 - 1) + 1, 8))
    idx2 Suivant

    Si one Alors
      program <- program & ":"
    FinSi

  idx1 Suivant

  Si NON(one) Alors
    program <- program & ":"
  FinSi

  end <- TempsUnix()
  EcrireErr "Generated", Longueur(program), "instructions in", end - start, "seconds."
  EcrireErr "\033[?25h" \

  Si raw Alors
    Retourne program
  Sinon
    Retourne compress(program)
  FinSi

FinFonction

Fonction compress(prog en Chaîne) en Chaîne
  # LZ78 compression
  # 0 1 00000 1 0000 1 0 1 0
  # .+.+.....+.+....+.+.+.+.:
  # 0.0+1+1.4.2.6.4+3.6+1:
  Table dict
    Clef en Chaîne
    Valeur en Entier
  FinTable

  Variables i, idx, cpt, len en Entier
  Variables c, ch, out en Chaîne
  Variables start, end, percent en Numérique

  start <- TempsUnix()
  EcrireErr "\033[?25lCompressing..."

  cpt <- 0
  idx <- 0
  ch <- ""
  out <- ""
  len <- Longueur(prog)

  Pour i <- 1 à len
    c <- Extraire(prog, i, 1)
    Si c <> "+" ET c <> "." ET c <> ":" Alors
      error(i, c)
      Retourne ""
    FinSi
    ch <- ch & c
    Si dict[ch] <> ? Alors
      cpt <- dict[ch]
    Sinon
      out <- out & Chaîne(cpt) & c
      cpt <- 0
      idx <- idx + 1
      dict[ch] <- idx
      ch <- ""
    FinSi
    percent <- 100 * i / Numérique(len)
    print_line(Chaîne(Entier(percent)) & "% " & ch)
  i Suivant

  EcrireErr ""

  Si ch <> "" Alors
    out <- out & Chaîne(cpt)
  FinSi

  end <- TempsUnix()

  EcrireErr "\033[?25hCompressed " \
  EcrireErr 100 - (Longueur(out) / Numérique(Longueur(prog)) * 100),"% " \
  EcrireErr "in", end - start, "seconds."

  Retourne out
FinFonction

Fonction decompress(prog en Chaîne, verbose en Booléen) en Chaîne
  Table dict
    Clef en Chaîne
    Valeur en Chaîne
  FinTable

  Variables i, idx, len en Entier
  Variables n, c, ch, out en Chaîne
  Variables start, end, percent en Numérique
  Tableau values[] en Chaîne

  Fonction is_digit(car en Caractère) en Booléen
    Retourne CodeCar(car) >= 48 ET CodeCar(car) <= 57
  FinFonction

  Si verbose Alors
    start <- TempsUnix()
    EcrireErr "\033[?25lDecompressing..."
  FinSi

  idx <- 1
  ch <- ""
  n <- ""
  out <- ""
  dict["0"] <- ""
  len <- Longueur(prog)

  Pour i <- 1 à len
    c <- Extraire(prog, i, 1)
    Si is_digit(c) Alors
      n <- n & c
    Sinon
      Si c <> "+" ET c <> "." ET c <> ":" Alors
        error(i, c)
        Retourne ""
      SinonSi n = "" Alors
        # Fichier non compressé, retourné tel quel.
        Retourne prog
      FinSi
      ch <- dict[n] & c
      dict[Chaîne(idx)] <- ch
      idx <- idx + 1
      n <- ""
    FinSi
    Si verbose Alors
      percent <- 100 * i / Numérique(len)
      print_line(Chaîne(Entier(percent)) & "% " & ch)
    FinSi
  i Suivant

  Redim values[Taille(dict) - 1]
  values <- Valeurs(dict)
  Pour i <- 0 à Taille(values) - 1
    out <- out & values[i]
  i Suivant

  Si n <> "" Alors
    out <- out & dict[n]
  FinSi

  Si verbose Alors
    EcrireErr ""
    end <- TempsUnix()
    EcrireErr "\033[?25hDecompressed in", end - start, "seconds."
  FinSi

  Retourne out
FinFonction

Fonction get_chars() en Chaîne
  # 0100100 → 72 → H
  Variable chars en Caractère*2
  Variables sub_buf, string en Chaîne
  Variables idx1, idx2, res en Entier
  chars <- "01"
  string <- ""
  Pour idx1 <- 1 à Longueur(buffer) Pas 8
    res <- 0
    sub_buf <- Extraire(buffer, idx1, 8)
    Pour idx2 <- 1 à 8
      res <- res * 2
      res <- res + Trouve(chars, Extraire(sub_buf, idx2, 1)) - 1
    idx2 Suivant
    string <- string & Car(res)
  idx1 Suivant
  Retourne string
FinFonction

Procédure flip()
  # +
  Si register = 0 Alors
    register <- 1
  Sinon
    register <- 0
  FinSi
FinProcédure

Procédure get_bit()
  # .
  buffer <- buffer & Chaîne(register)
FinProcédure

Procédure print()
  # :
  Ecrire get_chars() \
  buffer <- ""
FinProcédure

Fonction execute(cprog en Chaîne) en Booléen
  Variable idx en Entier
  Variable cmd en Caractère
  Variable prog en Chaîne

  reset()

  prog <- decompress(cprog, FAUX)

  Pour idx <- 1 à Longueur(prog)
    cmd <- Extraire(prog, idx, 1)
    Si cmd = "+" Alors
      flip()
    SinonSi cmd = "." Alors
      get_bit()
    SinonSi cmd = ":" Alors
      print()
    Sinon
      error(idx, cmd)
      Retourne FAUX
    FinSi
  idx Suivant
  Ecrire ""
  Retourne VRAI
FinFonction

