Librairie
# simpfunk:
# + flip bit
# . add bit to buffer
# : print buffer and clear

Variable one_bit en Entier
Variable buffer en Chaîne

Procédure reset()
  one_bit <- 0
  buffer  <- ""
FinProcédure

Fonction bin_pad(char en Caractère) en Chaîne
  # H → 72 → 100100 → 0100100
  Variable chars en Caractère*2
  Variable cc en Entier
  Variable res en Chaîne
  chars <- "01"
  cc <- CodeCar(char)
  res <- ""
  TantQue cc > 0
    res <- Extraire(chars, cc % 2 + 1, 1) & res
    cc <- cc / 2
  FinTantQue
  TantQue Longueur(res) < 8
    res <- "0" & res
  FinTantQue
  Retourne res
FinFonction

Fonction to_funk(string en Chaîne, one en Booléen) en Chaîne
  # H → 72 → 0100100 → .+.+..+.+..
  Variables bits, program en Chaîne
  Variables bit, idx1, idx2 en Entier
  bits <- ""
  program <- ""
  bit <- 0
  Pour idx1 <- 1 à Longueur(string)
    bits <- bin_pad(Extraire(string, idx1, 1))
    Pour idx2 <- 1 à 8
      Si Extraire(bits, idx2, 1) = "0" Alors
        Si bit = 0 Alors
          program <- program & "."
        Sinon
          program <- program & "+."
        FinSi
        bit <- 0
      Sinon
        Si bit = 1 Alors
          program <- program & "."
        Sinon
          program <- program & "+."
        FinSi
        bit <- 1
      FinSi
    idx2 Suivant
    Si one Alors
      program <- program & ":"
    FinSi
  idx1 Suivant
  Si NON(one) Alors
    program <- program & ":"
  FinSi
  Retourne program
FinFonction

Fonction entry_index(name en Chaîne, entries[] en Entry) en Entier
  Variable i en Entier
  Pour i <- 0 à Taille(entries) - 1
    Si entries[i].entry = name Alors
      Retourne i
    FinSi
  i Suivant
  Retourne -1
FinFonction

Fonction compress(prog en Chaîne) en Chaîne
  # 01000001 → .+.+.....+. → 2.+5.+.
 Structure Entry
   entry en Chaîne
   value en Entier
 FinStructure
 Tableau dict[] en Entry
 Variables i, idx, cpt en Entier
 Variables c, ch, out en Chaîne
 ch <- ""
 Pour i <- 1 à Longueur(prog)
   c <- Extraire(prog, i, 1)
   ch <- ch & c
   idx <- entry_index(ch, dict)
   Si idx <> -1 Alors
     cpt <- dict[i].value
   FinSi
 i Suivant
FinFonction

Fonction get_chars() en Chaîne
  # 0100100 → 72 → H
  Variable chars en Caractère*2
  Variables sub_buf, string en Chaîne
  Variables idx1, idx2, res en Entier
  chars <- "01"
  string <- ""
  Pour idx1 <- 1 à Longueur(buffer) Pas 8
    res <- 0
    sub_buf <- Extraire(buffer, idx1, 8)
    Pour idx2 <- 1 à 8
      res <- res * 2
      res <- res + Trouve(chars, Extraire(sub_buf, idx2, 1)) - 1
    idx2 Suivant
    string <- string & Car(res)
  idx1 Suivant
  Retourne string
FinFonction

Procédure flip()
  # +
  Si one_bit = 0 Alors
    one_bit <- 1
  Sinon
    one_bit <- 0
  FinSi
FinProcédure

Procédure get_bit()
  # .
  buffer <- buffer & Chaîne(one_bit)
FinProcédure

Procédure print()
  # :
  Ecrire get_chars() \
  buffer <- ""
FinProcédure

Procédure execute(prog en Chaîne)
  Variable idx en Entier
  Variable cmd en Caractère
  reset()
  Pour idx <- 1 à Longueur(prog)
    cmd <- Extraire(prog, idx, 1)
    Si cmd = "+" Alors
      flip()
    SinonSi cmd = "." Alors
      get_bit()
    SinonSi cmd = ":" Alors
      print()
    FinSi
  idx Suivant
FinProcédure

